#! /bin/sh

  
file_to_use=/tmp/hsocaml.ml

cat <<EOF > $file_to_use

#use "topfind"
#thread
#require "lwt.unix"
#require "lwt.top"
#require "threads, core, pgocaml, sexplib.syntax, biocaml, sequme, cryptokit, simple_pam"
#directory "_build/src/codegen"
#directory "_build/src/lib"
#load "hitscoregen.cma"
#load "hitscore.cma"

open Core.Std
open Hitscore
let () = printf "--> Open Core.Std\n"
let () = printf "--> open Hiscore\n"
open Sequme_flow
open Sequme_flow_list
open Sequme_flow_sys
let () = printf "--> Open Flow (sys,list)\n"

open Hitscore_script
let () = printf "--> Open Script\n"

let ok_exn m =
  match Lwt_main.run m with
| Ok o -> o
| Error e -> failwith "NOT OK!"
let () = printf "--> ok_exn (Lwt)\n"

let () = printf "END INIT\n\n"
EOF

ocaml_init=/tmp/ocaml_init_hs.ml

cat <<EOF > $ocaml_init

#use "topfind";;

Toploop.use_silently Format.err_formatter "$file_to_use";;

EOF

if [ -f "$1" ]; then
  echo "Adding $1"
  cat $1 >> $ocaml_init
fi

if [ -t 1 ] ; then
    ledit ocaml -init $ocaml_init 
else
    ocaml -init $ocaml_init 
fi

