#! /bin/sh

OCAMLFINDOPT='ocamlfind ocamlopt -syntax camlp4o -thread -package hitscore,sexplib.syntax'

make_module () {

    local name=_migrator/$1.ml
    local tag=$2
    local version=$2
    local tmp=/tmp/mmm.ml

    git checkout $tag
    if [ $? -ne 0 ] ; then
        git checkout v$version
    fi

    rm -fr _build/src/codegen
    ocamlbuild src/codegen/hitscoregen.native

    _build/src/codegen/hitscoregen.native codegen data/hitscore_layout $tmp
    echo 'let ($) f x = f x' > $name
    echo "module Info = struct let version = \"$version\" end" >> $name
    cat $tmp >> $name
    sed -i 's/: Hitscore_layout_interface.LAYOUT//' $name
    sed -i 's/with module Flow = Flow//' $name
    sed -i "s/with type 'a PGOCaml.monad = 'a Flow.IO.t//" $name
    sed -i 's/PGSQL *(dbh)/failwith $/g' $name
    sed -i 's/\$?\?\([a-z_A-Z0-9]\+\)/" ^ (let _ = \1  in "") ^  "/g' $name

    $OCAMLFINDOPT -c $name
}


if [ "$1" = "update" ]; then
    mkdir -p _migrator
    current_branch=`git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' \
                      -e 's/* \(.*\)/\1/'`
    make_module v07  0.7
    make_module v06  0.6
    make_module v051 0.5.1
    git checkout $current_branch
    cd _migrator
    ln -sf ../src/migrator/migrator.ml
    cd ..
fi

if [ "$1" = "-h" ]; then
    printf  "usage: $0        \n   Build the current migrator in _migrator/.\n"
    printf  "usage: $0 update \n   Update the generated code in _migrator/ and build.\n"
    printf  "   (will fail if there are uncommitted/unstashed changes)\n"
    exit 0
fi

cd _migrator
$OCAMLFINDOPT -linkpkg v07.cmx v051.cmx v06.cmx migrator.ml -o migrator
cd ..

