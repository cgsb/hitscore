# OASIS_START
# DO NOT EDIT (digest: f8806df01481028f2b2ed35f3b82a087)
# Ignore VCS directories, you can use the same kind of rule outside 
# OASIS_START/STOP if you want to exclude directories that contains 
# useless stuff for the build process
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library hitscoregen
"src/codegen/hitscoregen.cmxs": use_hitscoregen
# Executable hitscoregen
<src/codegen/hitscoregen.{native,byte}>: pkg_threads
<src/codegen/hitscoregen.{native,byte}>: pkg_core
<src/codegen/hitscoregen.{native,byte}>: pkg_sexplib.syntax
<src/codegen/*.ml{,i}>: pkg_threads
<src/codegen/*.ml{,i}>: pkg_core
<src/codegen/*.ml{,i}>: pkg_sexplib.syntax
# Library hitscore
"src/lib/hitscore.cmxs": use_hitscore
<src/lib/*.ml{,i}>: use_hitscoregen
<src/lib/*.ml{,i}>: pkg_threads
<src/lib/*.ml{,i}>: pkg_core
<src/lib/*.ml{,i}>: pkg_pgocaml
<src/lib/*.ml{,i}>: pkg_sexplib.syntax
<src/lib/*.ml{,i}>: pkg_biocaml
<src/lib/*.ml{,i}>: pkg_sequme
<src/lib/*.ml{,i}>: pkg_lwt
<src/lib/*.ml{,i}>: pkg_lwt.unix
# Executable hitscore
<src/app/hitscore_main.{native,byte}>: use_hitscore
<src/app/hitscore_main.{native,byte}>: use_hitscoregen
<src/app/hitscore_main.{native,byte}>: pkg_threads
<src/app/hitscore_main.{native,byte}>: pkg_core
<src/app/hitscore_main.{native,byte}>: pkg_pgocaml
<src/app/hitscore_main.{native,byte}>: pkg_sexplib.syntax
<src/app/hitscore_main.{native,byte}>: pkg_biocaml
<src/app/hitscore_main.{native,byte}>: pkg_sequme
<src/app/hitscore_main.{native,byte}>: pkg_lwt
<src/app/hitscore_main.{native,byte}>: pkg_lwt.unix
<src/app/*.ml{,i}>: use_hitscore
<src/app/*.ml{,i}>: use_hitscoregen
<src/app/*.ml{,i}>: pkg_threads
<src/app/*.ml{,i}>: pkg_core
<src/app/*.ml{,i}>: pkg_pgocaml
<src/app/*.ml{,i}>: pkg_sexplib.syntax
<src/app/*.ml{,i}>: pkg_biocaml
<src/app/*.ml{,i}>: pkg_sequme
<src/app/*.ml{,i}>: pkg_lwt
<src/app/*.ml{,i}>: pkg_lwt.unix
# Executable hitscored
<src/server/server_main.{native,byte}>: use_hitscore
<src/server/server_main.{native,byte}>: use_hitscoregen
<src/server/server_main.{native,byte}>: pkg_threads
<src/server/server_main.{native,byte}>: pkg_core_extended
<src/server/server_main.{native,byte}>: pkg_core
<src/server/server_main.{native,byte}>: pkg_pgocaml
<src/server/server_main.{native,byte}>: pkg_sexplib.syntax
<src/server/server_main.{native,byte}>: pkg_biocaml
<src/server/server_main.{native,byte}>: pkg_sequme
<src/server/server_main.{native,byte}>: pkg_lwt
<src/server/server_main.{native,byte}>: pkg_lwt.unix
<src/server/*.ml{,i}>: use_hitscore
<src/server/*.ml{,i}>: use_hitscoregen
<src/server/*.ml{,i}>: pkg_threads
<src/server/*.ml{,i}>: pkg_core_extended
<src/server/*.ml{,i}>: pkg_core
<src/server/*.ml{,i}>: pkg_pgocaml
<src/server/*.ml{,i}>: pkg_sexplib.syntax
<src/server/*.ml{,i}>: pkg_biocaml
<src/server/*.ml{,i}>: pkg_sequme
<src/server/*.ml{,i}>: pkg_lwt
<src/server/*.ml{,i}>: pkg_lwt.unix
# Executable gencore
<src/client/client_main.{native,byte}>: use_hitscore
<src/client/client_main.{native,byte}>: use_hitscoregen
<src/client/client_main.{native,byte}>: pkg_threads
<src/client/client_main.{native,byte}>: pkg_core_extended
<src/client/client_main.{native,byte}>: pkg_core
<src/client/client_main.{native,byte}>: pkg_pgocaml
<src/client/client_main.{native,byte}>: pkg_sexplib.syntax
<src/client/client_main.{native,byte}>: pkg_biocaml
<src/client/client_main.{native,byte}>: pkg_sequme
<src/client/client_main.{native,byte}>: pkg_lwt
<src/client/client_main.{native,byte}>: pkg_lwt.unix
<src/client/*.ml{,i}>: use_hitscore
<src/client/*.ml{,i}>: use_hitscoregen
<src/client/*.ml{,i}>: pkg_threads
<src/client/*.ml{,i}>: pkg_core_extended
<src/client/*.ml{,i}>: pkg_core
<src/client/*.ml{,i}>: pkg_pgocaml
<src/client/*.ml{,i}>: pkg_sexplib.syntax
<src/client/*.ml{,i}>: pkg_biocaml
<src/client/*.ml{,i}>: pkg_sequme
<src/client/*.ml{,i}>: pkg_lwt
<src/client/*.ml{,i}>: pkg_lwt.unix
# Executable client_server_test
<src/test/client_server.{native,byte}>: use_hitscore
<src/test/client_server.{native,byte}>: use_hitscoregen
<src/test/client_server.{native,byte}>: pkg_threads
<src/test/client_server.{native,byte}>: pkg_core_extended
<src/test/client_server.{native,byte}>: pkg_core
<src/test/client_server.{native,byte}>: pkg_pgocaml
<src/test/client_server.{native,byte}>: pkg_sexplib.syntax
<src/test/client_server.{native,byte}>: pkg_biocaml
<src/test/client_server.{native,byte}>: pkg_sequme
<src/test/client_server.{native,byte}>: pkg_lwt
<src/test/client_server.{native,byte}>: pkg_lwt.unix
<src/test/*.ml{,i}>: use_hitscore
<src/test/*.ml{,i}>: use_hitscoregen
<src/test/*.ml{,i}>: pkg_threads
<src/test/*.ml{,i}>: pkg_core_extended
<src/test/*.ml{,i}>: pkg_core
<src/test/*.ml{,i}>: pkg_pgocaml
<src/test/*.ml{,i}>: pkg_sexplib.syntax
<src/test/*.ml{,i}>: pkg_biocaml
<src/test/*.ml{,i}>: pkg_sequme
<src/test/*.ml{,i}>: pkg_lwt
<src/test/*.ml{,i}>: pkg_lwt.unix
# OASIS_STOP

<src/*/*.ml{,i}>: syntax_camlp4o
